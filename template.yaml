AWSTemplateFormatVersion: "2010-09-09"
Description: Full-stack image upload for GeeksVisor Assignment
Parameters:
  StackName:
    Type: String
    Default: image-upload-stack
    Description: Name for all stack resources to ensure all naming values remain consistent
Resources:
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${StackName}-images-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag
            MaxAge: 3000

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${StackName}-user-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${StackName}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALL_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 24
      IdTokenValidity: 24
      RefreshTokenValidity: 30
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-appsync-service-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub ${ImageBucket}/images/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref ImageBucket
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${StackName}-api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !Ref GraphQLApi
      Definition: |
        type S3UploadPayload {
          uploadUrl: String!
          key: String!
        }

        type Mutation {
          getImageUploadUrl(fileName: String!, fileType: String!): S3UploadPayload!
        }

        type Query {
          # Placeholder query - Appsync requirements
          hello: String
        }

        schema {
          query: Query
          mutation: Mutation
        }

  S3DataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref GraphQLApi
      Name: S3DataSource
      Type: NONE

  # Resolver for getImageUploadUrl mutation
  GetImageUploadUrlResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref GraphQLApi
      TypeName: Mutation
      FieldName: getImageUploadUrl
      DataSourceName: !GetAtt S3DataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "payload": {}
        }
      ResponseMappingTemplate: !Sub |
        #set($userId = $context.identity.sub)
        #set($key = "images/$userId/$context.arguments.fileName")
        #set($bucket = "${ImageBucket}")
        #set($region = "${AWS::Region}")

        ## Generate presigned URL using AppSync utility
        #set($expirationTime = 300)

        {
          "uploadUrl": "https://$bucket.s3.$region.amazonaws.com/$key?X-Amz-Expires=$expirationTime",
          "key": "$key"
        }

Outputs:
  GraphQLApiEndpoint:
    Description: GraphQL API Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
    Export:
      Name: !Sub ${StackName}-GraphQLEndpoint
  GraphQLApiId:
    Description: GraphQL API ID
    Value: !Ref GraphQLApi
    Export:
      Name: !Sub ${StackName}-GraphQLApiId
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub ${StackName}-UserPoolId
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub ${StackName}-UserPoolClientId
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref ImageBucket
    Export:
      Name: !Sub ${StackName}-S3BucketName
  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub ${StackName}-Region
