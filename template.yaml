AWSTemplateFormatVersion: "2010-09-09"
Description: Secure image upload solution with AppSync and S3
Parameters:
  StackName:
    Type: String
    Default: image-upload-stack
    Description: Base name for all resources

Resources:
  # S3 Bucket for image storage
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${StackName}-images-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [PUT]
            AllowedOrigins: ["*"]
            ExposedHeaders: ["ETag"]
            MaxAge: 3000

  # Cognito User Pool for authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${StackName}-user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${StackName}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # AppSync API
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${StackName}-api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3WriteAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::${ImageBucket}/images/*

  # Lambda Function for presigned URLs
  PresignUrlLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${StackName}-presign-url
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Code:
        ZipFile: |
          const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
          const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');

          const s3 = new S3Client();

          exports.handler = async (event) => {
            const { fileName, fileType } = event.arguments;
            const userId = event.identity.sub;
            
            const key = `images/${userId}/${fileName}`;
            
            const command = new PutObjectCommand({
              Bucket: process.env.BUCKET_NAME,
              Key: key,
              ContentType: fileType,
            });
            
            const uploadUrl = await getSignedUrl(s3, command, { expiresIn: 300 });
            
            return {
              uploadUrl,
              key
            };
          };
      Environment:
        Variables:
          BUCKET_NAME: !Ref ImageBucket

  # IAM Role for AppSync to invoke Lambda
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt PresignUrlLambda.Arn

  # Lambda Data Source - Must come before schema
  LambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn:
      - GraphQLApi
      - AppSyncServiceRole
      - PresignUrlLambda
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: LambdaDataSource
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt PresignUrlLambda.Arn

  # GraphQL Schema - Depends on data source
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    DependsOn:
      - LambdaDataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type S3UploadPayload {
          uploadUrl: String!
          key: String!
        }

        type Mutation {
          getImageUploadUrl(fileName: String!, fileType: String!): S3UploadPayload!
        }

        type Query {
          health: String
        }

        schema {
          query: Query
          mutation: Mutation
        }

  # Resolver for mutation
  GetImageUploadUrlResolver:
    Type: AWS::AppSync::Resolver
    DependsOn:
      - GraphQLSchema
      - LambdaDataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: getImageUploadUrl
      DataSourceName: !GetAtt LambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $utils.toJson($context.arguments),
            "identity": $utils.toJson($context.identity)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

Outputs:
  GraphQLApiEndpoint:
    Description: GraphQL API Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  S3BucketName:
    Description: S3 Bucket Name
    Value: !Ref ImageBucket
  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
